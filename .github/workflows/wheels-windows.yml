name: Wheel Builder (Windows)
on:
  workflow_dispatch:
    inputs:
      version:
        required: true

jobs:
  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        WINDOWS:
          # - {ARCH: 'x86', WINDOWS: 'win32', VC: 'amd64_x86'}
          - {ARCH: 'x64', WINDOWS: 'win64', VC: 'amd64'}
        PYTHON:
          - {VERSION: "3.8", MSVC_VERSION: "2019", "ABI_VERSION": "cp36"}
    name: "${{ matrix.PYTHON.VERSION }} ${{ matrix.WINDOWS.WINDOWS }} ${{ matrix.PYTHON.ABI_VERSION }}"
    steps:
      - uses: actions/checkout@v2
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.PYTHON.VERSION }}
          architecture: ${{ matrix.WINDOWS.ARCH }}
      - run: |
          python -m pip install -U pip setuptools wheel
          pip install --user -Ur setup_requirements.txt
          pip install --user -Ur requirements.txt
          pip install --user -Ur test_requirements.txt
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v1
      - name: Cache Rust Build
        uses: actions/cache@v2
        with:
          path: rust/target
          key: ${{ runner.os }}-rust-target-${{ hashFiles('rust/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-rust-target-
      - name: Build wheel and test
        run: |
          python setup.py bdist_wheel
        # python setup.py test
        # md wheelhouse
        # copy dist/cmsis*.whl wheelhouse
      - uses: actions/upload-artifact@v2
        with:
          name: "cmsis-pack-manager-${{ github.event.inputs.version }}-${{ matrix.WINDOWS.WINDOWS }}"
          # path: wheelhouse/
          path: dist/
